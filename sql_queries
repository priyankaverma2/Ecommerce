-- Create database
create database ecommerce;

use ecommerce;

-- Create table products
CREATE TABLE products (
    product_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    quantity VARCHAR(255) NOT NULL,
    `desc` VARCHAR(255) NOT NULL,
    amount VARCHAR(255) NOT NULL,
    status BOOLEAN NOT NULL,
    image_url VARCHAR(255) NOT NULL,
    category VARCHAR(255) NOT NULL,
    PRIMARY KEY (product_id)
);

-- Create table admin
CREATE TABLE admin (
    admin_id INT NOT NULL,
    email VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    PRIMARY KEY (admin_id)
);

-- Create table employee
CREATE TABLE employee (
    employee_id INT NOT NULL,
    email VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    PRIMARY KEY (employee_id)
);

-- Create table account
CREATE TABLE account (
    account_number INT NOT NULL,
    amount VARCHAR(255) NOT NULL,
    PRIMARY KEY (account_number)
);

-- Create table user
CREATE TABLE user (
    user_id INT NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(255) NOT NULL,
    dob DATE NOT NULL,
    address VARCHAR(255) NOT NULL,
    account_number_ref INT NOT NULL,
    funds VARCHAR(255) NOT NULL,
    login_counter VARCHAR(255) NOT NULL,
    status BOOLEAN NOT NULL,
    PRIMARY KEY (user_id),
    FOREIGN KEY (account_number_ref) REFERENCES account(account_number)
);

-- Create table orders
CREATE TABLE orders (
    order_id INT NOT NULL,
    user_id_ref INT NOT NULL,
    time_stamp TIMESTAMP NOT NULL,
    status VARCHAR(255) NOT NULL,
    amount VARCHAR(255) NOT NULL,
    PRIMARY KEY (order_id),
    FOREIGN KEY (user_id_ref) REFERENCES user(user_id)
);

-- Create table items
CREATE TABLE items (
    item_id INT NOT NULL,
    order_id_ref INT NOT NULL,
    product_id_ref INT NOT NULL,
    quantity VARCHAR(255) NOT NULL,
    price VARCHAR(255) NOT NULL,
    PRIMARY KEY (item_id),
    FOREIGN KEY (order_id_ref) REFERENCES orders(order_id),
    FOREIGN KEY (product_id_ref) REFERENCES products(product_id)
);

-- Create table tickets
CREATE TABLE tickets (
    ticket_id INT NOT NULL,
    user_id_ref INT NOT NULL,
    time_stamp TIMESTAMP NOT NULL,
    `desc` VARCHAR(255) NOT NULL,
    status BOOLEAN NOT NULL,
    approved_by_ref INT NOT NULL,
    PRIMARY KEY (ticket_id),
    FOREIGN KEY (user_id_ref) REFERENCES user(user_id),
    FOREIGN KEY (approved_by_ref) REFERENCES employee(employee_id)
);

-- Create table audit_logs
CREATE TABLE audit_logs (
    audit_log_id INT NOT NULL,
    `desc` VARCHAR(255) NOT NULL,
    role VARCHAR(255) NOT NULL,
    role_id INT NOT NULL,
    endpoint VARCHAR(255) NOT NULL,
    time_stamp TIMESTAMP NOT NULL,
    PRIMARY KEY (audit_log_id)
);

-- Create table exceptions
CREATE TABLE exceptions (
    exception_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    `desc` VARCHAR(255) NOT NULL,
    role BIGINT NOT NULL,
    role_id BIGINT NOT NULL,
    endpoint VARCHAR(255) NOT NULL,
    time_stamp TIMESTAMP NOT NULL,
    PRIMARY KEY (exception_id)
);

-- Create table login_logs
CREATE TABLE login_logs (
    log_id INT NOT NULL,
    `desc` VARCHAR(255) NOT NULL,
    role VARCHAR(255) NOT NULL,
    role_id INT NOT NULL,
    time_stamp TIMESTAMP NOT NULL,
    PRIMARY KEY (log_id)
);

-- Create table cart
CREATE TABLE cart (
    cart_id INT NOT NULL,
    user_id_ref INT NOT NULL,
    product_id_ref INT NOT NULL,
    PRIMARY KEY (cart_id),
    FOREIGN KEY (user_id_ref) REFERENCES user(user_id),
    FOREIGN KEY (product_id_ref) REFERENCES products(product_id)
);
